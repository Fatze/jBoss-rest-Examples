<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>ST.I.Tooling</groupId>
        <artifactId>Examples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <properties>
        <cxf.classname>HiRest</cxf.classname>

        <cxf.java2wadl.classname>Rest.MyServiceimpl</cxf.java2wadl.classname>
        <cxf.java2wadl.fullclassname>${project.groupId}.${cxf.java2wadl.classname}</cxf.java2wadl.fullclassname>
    </properties>


    <groupId>${project.parent.groupId}</groupId>
    <artifactId>HelloWorldRest</artifactId>
    <version>${project.parent.version}</version>
    <packaging>bundle</packaging>

    <name>HelloWorldRest</name>
    <description>ST ::RESTful WebService Example using JAX-RS with JBoss Fuse</description>
    <url>http://maven.apache.org</url>


    <dependencies>
        <!--
            For coding the example, we don't actually depend on any CXF classes - we only use the JAX-RS (JSR-311)
            standard annotations and API
        -->
        <dependency>
            <groupId>org.apache.servicemix.specs</groupId>
            <artifactId>org.apache.servicemix.specs.jsr311-api-1.1.1</artifactId>
        </dependency>

        <!--
            We are also building a small Java client application that we can use to test our web web services.
            For performing the HTTP requests, we are using Apache Commons HttpClient.
        -->
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
        </dependency>

        <!--
            For logging, we will use SLF4J, which is also available in the container by default.
          -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <!-- Test Dependencies -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
          Add the slf4j-log4j12 dependency jar for testing
        -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.wordnik</groupId>
            <artifactId>swagger-jaxrs_2.10</artifactId>
            <version>1.3.0</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
        </dependency>
    </dependencies>


    <build>
    <defaultGoal>install</defaultGoal>
    <resources>
        <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
        </resource>
    </resources>
    <plugins>
        <plugin>
            <!-- Skip Test by default and enable them only in Test profile -->
            <!--The Surefire Plugin is used during the test phase of the build lifecycle to execute-->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${version.maven-surefire-plugin}</version>
            <configuration>
                <skipTests>true</skipTests>
            </configuration>
        </plugin>
        <!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation processors -->
        <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
<!--            <version>${version.compiler.plugin}</version>
            <configuration>
                <source>1.6</source>
                <target>1.6</target>
            </configuration>-->
        </plugin>

        <!-- Need to setup the OSGi meta information here -->
        <plugin>
            <groupId>org.apache.felix</groupId>
            <artifactId>maven-bundle-plugin</artifactId>
            <version>${version.maven-bundle-plugin}</version>
            <extensions>true</extensions>
            <configuration>
                <instructions>
                    <Import-Package>
                        javax.ws.rs,
                        javax.ws.rs.core,
                        javax.xml.bind.annotation,
                        org.osgi.service.blueprint,
                        com.wordnik.swagger.jaxrs.config,
                        com.wordnik.swagger.jaxrs.listing,
                        com.wordnik.swagger.annotations,
                        com.fasterxml.jackson.annotation,
                        com.fasterxml.jackson.core,
                        com.fasterxml.jackson.databind,
                        com.fasterxml.jackson.jaxrs.json,
                        javax.ws.rs.ext,
                        *
                    </Import-Package>
                    <Export-Package>
                        com.wordnik.swagger.sample.resource,
                        $(cxf.classpath)
                    </Export-Package>

                </instructions>
            </configuration>
        </plugin>
<!--        <plugin>
            <groupId>org.apache.karaf.tooling</groupId>
            <artifactId>features-maven-plugin</artifactId>
            <version>2.3.6</version>
            <executions>
                <execution>
                    <id>generate</id>
                    <phase>generate-resources</phase>
                    <goals>
                        <goal>generate-features-xml</goal>
                    </goals>
                    <configuration>
                        <bundles>src/main/resources/bundle.properties</bundles>
                        <kernelVersion>2.3.6</kernelVersion>
                        <outputFile>target/features.xml</outputFile>
                    </configuration>
                </execution>
            </executions>
        </plugin>-->
<!--        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
                <execution>
                    <id>filter</id>
                    <phase>generate-resources</phase>
                    <goals>
                        <goal>resources</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>-->
        <!--<plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
                <execution>
                    <id>attach-artifacts</id>
                    <phase>package</phase>
                    <goals>
                        <goal>attach-artifact</goal>
                    </goals>
                    <configuration>
                        <artifacts>
                            <artifact>
                                <file>target/classes/features.xml</file>
                                <type>xml</type>
                                <classifier>features</classifier>
                            </artifact>
                        </artifacts>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        <plugin>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-java2wadl-plugin</artifactId>
            <executions>
                <execution>
                    <id>process-classes</id>
                    <phase>process-classes</phase>
                    <goals>
                        <goal>java2wadl</goal>
                    </goals>
                    <configuration>
                        <classResourceNames>
                            <classResourceName>${cxf.java2wadl.fullclassname}</classResourceName>
                        </classResourceNames>
                        <attachWadl>false</attachWadl>
                    </configuration>
                </execution>
            </executions>
        </plugin>-->
        <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>fabric8-maven-plugin</artifactId>
            <configuration>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-maven-plugin</artifactId>
                <jolokiaUrl>http://stws2103:8181/jolokia</jolokiaUrl>
                <profileVersion>1.2.5</profileVersion>
            </configuration>
            <!--      	<configuration>
                      <jolokiaUrl>http://10.57.24.150:8181/jolokia</jolokiaUrl>
                      <profileVersion>1.2.5</profileVersion>
                      </configuration>  -->
        </plugin>
        <!-- to run the example using mvn camel:run -->
        <plugin>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-maven-plugin</artifactId>
            <version>2.12.0.redhat-610379</version>
            <configuration>
                <useBlueprint>true</useBlueprint>
            </configuration>
        </plugin>
    </plugins>
</build>
</project>